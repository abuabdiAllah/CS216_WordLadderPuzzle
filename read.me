The word ladder puzzle was invented in 1878, by Lewis Carroll, the author of Alice in
Wonderland. In a word ladder puzzle you must make the change occur gradually by changing
one letter at a time. At each step you must transform one word into another word, you are not
allowed to transform a word into a non-word. In this Lab assignment, we are trying to
demonstrate a word ladder puzzle for a small group of four-letter words only. For example, let us
solve the ‚Äúladder‚Äù from the word ‚ÄúFOOL‚Äù to the word ‚ÄúSAGE‚Äù, and remember we only have a
small set of four-letter words available. We can solve this problem using a graph algorithm
similar to what we have done in Lab11. Here is an outline of what we are going to do:
‚Ä¢ Represent the relationships between the words as a graph: each four-letter word
represents a Vertex in the Graph; there is an edge from one word to another if the two
words are only different by a single letter.
‚Ä¢ Use the graph algorithm named Breadth First Search (BFS) to find a shortest path from
the starting word to the ending word.

In this Project Assignment, the Graph associated with Figure 1 is built from reading the
collection of 15 four-letter words in a file, named FourLetterWords_simple.txt. To figure out
how to connect the words, we could compare each word in the collection with every other. When
we compare two words, we are looking to see how many letters are different. If the two words
in question are different by only one letter, we can create an edge between them in the graph.
For a small set of words this approach would work fine; however let‚Äôs look at an example in the
collection of four-letter words from another input file, named FourLetterWords.txt. We have a
list of 7,186 four-letter words in the collection. Roughly speaking, comparing one word to every
other word on the list is an ùëÇ(ùëõ ! ) algorithm. For 7,186 words, ùëõ ! is more than 51 million
comparisons (not counting possible 4 pairs of character comparison in each word).
Remember there is an edge from one word to another if the two words are only different
by a single letter. To figure out if there is an edge between any two words, we need compare
each word in the collection with every other. When we compare two words, we are looking to
see how many letters are different. If the two words in question are different by only one letter,
we can create an edge between them in the graph. 
